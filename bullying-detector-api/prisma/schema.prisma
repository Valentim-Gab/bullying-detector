generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  lastName      String?     @map("last_name") @db.VarChar(100)
  email         String      @unique @db.VarChar(100)
  password      String
  dateBirth     DateTime?   @map("date_birth") @db.Date
  phoneNumber   String?     @map("phone_number") @db.VarChar(25)
  role          String[]    @db.VarChar(10)
  avatar        String?
  verifiedEmail Boolean?    @default(false) @map("verified_email")
  detection     Detection[]
  vote          vote[]

  @@map("users")
}

model Detection {
  idDetection          Int             @id @default(autoincrement()) @map("id_detection")
  recordingAudio       String?         @map("recording_audio")
  mainText             String          @map("main_text")
  context              String?         @db.VarChar(255)
  mistralResult        Float?          @map("mistral_result")
  mistralMessage       String?         @map("mistral_message")
  cohereResult         Float?          @map("cohere_result")
  cohereMessage        String?         @map("cohere_message")
  databaseResult       Float?          @map("database_result")
  databaseUserDetect   Boolean?        @default(false) @map("database_user_detect")
  databaseUsersApprove Int?            @map("database_users_approve")
  databaseUsersReject  Int?            @map("database_users_reject")
  similarityResult     Float?          @map("similarity_result")
  avaliation           Float?
  idUser               Int?            @map("id_user")
  idPhrase             Int?            @map("id_phrase")
  externalModule       String?         @map("external_module") @db.VarChar(50)
  externalId           Int?            @map("external_id")
  deepseek_result      Int?
  deepseek_message     String?
  bullyingPhrase       bullyingPhrase? @relation(fields: [idPhrase], references: [idPhrase], onDelete: NoAction, onUpdate: NoAction)
  users                Users?          @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vote                 vote[]

  @@map("detection")
}

model bullyingPhrase {
  idPhrase   Int         @id @default(autoincrement()) @map("id_phrase")
  phrase     String?     @db.VarChar(100)
  userDetect Boolean?    @default(false) @map("user_detect")
  isBullying Boolean?    @default(true) @map("is_bullying")
  detection  Detection[]

  @@map("bullying_phrase")
}

model vote {
  idVote      Int        @id @default(autoincrement()) @map("id_vote")
  userId      Int?       @map("user_id")
  detectionId Int?       @map("detection_id")
  vote        Boolean?
  detection   Detection? @relation(fields: [detectionId], references: [idDetection], onDelete: NoAction, onUpdate: NoAction)
  users       Users?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
